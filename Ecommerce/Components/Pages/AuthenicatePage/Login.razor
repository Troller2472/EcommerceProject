@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject EcommerceContext _context
@inject NavigationManager navigation

<div class="d-flex align-items-center justify-content-center vh-100 bg-light">
    <div class="card rounded-4 shadow-lg" style="width: 400px;">
        <div class="card-body p-4">
            <h3 class="mb-4 text-center">Đăng nhập</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger text-center">@errorMessage</div>
            }

            <EditForm Model="loginRequest" OnValidSubmit="LoginMethod" FormName="loginForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label class="form-label fw-bold">Tài khoản</label>
                    <InputText @bind-Value="loginRequest.userName" class="form-control" placeholder="Nhập tài khoản..." />
                    <ValidationMessage For="@(() => loginRequest.userName)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">Mật khẩu</label>
                    <InputText @bind-Value="loginRequest.password" type="password" class="form-control" placeholder="Nhập mật khẩu..." />
                    <ValidationMessage For="@(() => loginRequest.password)" class="text-danger" />
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary btn-lg rounded-3">
                        Đăng Nhập
                    </button>
                </div>
            </EditForm>

            <div class="mt-3 text-center">
                <a href="/register" class="text-decoration-none">Chưa có tài khoản? Đăng ký</a>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }
    [SupplyParameterFromForm]
    public LoginModel loginRequest { get; set; } = new();

    string? errorMessage = string.Empty;

    async Task LoginMethod()
    {
        var user = _context.USER.Where(x=> x.userName == loginRequest.userName
            && x.passWord == loginRequest.password).FirstOrDefault();
        if (user is null)
        {
            errorMessage = "Sai tên tài khoản hoặc Mật khẩu!";
            return;
        }

        var claim = new List<Claim>
		{
			new Claim (ClaimTypes.Name, user.userName),
			new Claim (ClaimTypes.Role, user.roleName),
		};

        var indentity = new ClaimsIdentity(claim, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(indentity);
        await httpContext.SignInAsync(principal);
        navigation.NavigateTo("/");
    }
}
