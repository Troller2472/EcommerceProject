@page "/buyer"
@layout Blank
@inject EcommerceContext _dbContext
@inject NotificationService NotificationService
@inject ILocalStorageService LocalStorage
@rendermode InteractiveServer

<h3 class="mb-3">🛍️ Sản phẩm</h3>

<!-- Nút mở giỏ hàng -->
<div class="position-fixed end-0 top-0 p-3" style="z-index: 1050;">
    <button class="btn btn-warning rounded-circle shadow" data-bs-toggle="offcanvas" data-bs-target="#cartOffcanvas">
        🛒 <span class="badge bg-danger">@cart.Sum(x => x.quantity)</span>
    </button>
</div>

@if (products.Count == 0)
{
    <p>Đang tải...</p>
}
else
{
    <div class="container mt-4">
        <div class="row">
            @foreach (var product in products)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card h-100 rounded-3 border-0 shadow-sm">
                        <img onerror="this.src='noimage.png'"
                             src="@product.imgUrl"
                             class="card-img-top"
                             alt="@product.productName"
                             style="height: 200px; object-fit: cover;" />
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-truncate">@product.productName</h5>
                            <p class="card-text text-truncate small text-muted" title="@product.descriptions">@product.descriptions</p>
                            <p class="card-text fw-bold text-danger">@product.price?.ToString("N0") VNĐ</p>
                            <button class="btn btn-primary w-100 mt-auto" @onclick="() => AddToCart(product)">
                                <i class="bi bi-cart-plus"></i> Thêm vào giỏ
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

<!-- Offcanvas Giỏ hàng -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="cartOffcanvas">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title">🛒 Giỏ hàng</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
    </div>
    <div class="offcanvas-body">
        @if (cart.Count == 0)
        {
            <p>Giỏ hàng trống.</p>
        }
        else
        {
            <ul class="list-group mb-3">
                @foreach (var item in cart)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <img src="@item.imgUrl" onerror="this.src='noimage.png'"
                                 class="me-2 rounded" style="width:50px; height:50px; object-fit:cover;" />
                            <div>
                                <strong>@item.productName</strong><br />
                                <small>@item.price.ToString("N0") VNĐ</small>
                            </div>
                        </div>

                        <!-- Điều khiển số lượng -->
                        <div class="d-flex align-items-center">
                            <button class="btn btn-sm btn-outline-secondary me-1"
                                    @onclick="() => UpdateQuantity(item, item.quantity - 1)">
                                -
                            </button>

                            <input type="number" min="1" class="form-control form-control-sm text-center"
                                   style="width:60px"
                                   value="@item.quantity"
                                   @onchange="(e) => UpdateQuantity(item, int.Parse(e.Value.ToString()))" />

                            <button class="btn btn-sm btn-outline-secondary ms-1"
                                    @onclick="() => UpdateQuantity(item, item.quantity + 1)">
                                +
                            </button>

                            <button class="btn btn-sm btn-outline-danger ms-2"
                                    title="Xóa sản phẩm"
                                    @onclick="() => RemoveItem(item)">
                                ❌
                            </button>
                        </div>
                    </li>
                }
            </ul>
            <div class="d-flex justify-content-between">
                <strong>Tổng:</strong>
                <strong class="text-danger">@cart.Sum(x => x.price * x.quantity).ToString("N0") VNĐ</strong>
            </div>
            <button onclick="location.href='/checkout'" class="btn btn-success w-100 mt-3">Thanh toán</button>
        }
    </div>
</div>

@code {
    List<v_ProductCategory> products = new();
    List<CartItem> cart = new();

    protected override async Task OnInitializedAsync()
    {
        products = await Task.Run(() => _dbContext.v_ProductCategory.Where(p => p.isActive).ToList());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var savedCart = await LocalStorage.GetItemAsync<List<CartItem>>("cart");
            if (savedCart != null) cart = savedCart;
            StateHasChanged();
        }
    }

    private async Task UpdateQuantity(CartItem item, int newQuantity)
    {
        if (newQuantity < 1) newQuantity = 1; // không cho nhỏ hơn 1
        item.quantity = newQuantity;
        await LocalStorage.SetItemAsync("cart", cart);
        StateHasChanged();
    }

    private async Task RemoveItem(CartItem item)
    {
        cart.Remove(item);
        await LocalStorage.SetItemAsync("cart", cart);
        StateHasChanged();
    }

    void ShowNotification(string message)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Thêm giỏ hàng thành công!",
                Detail = message,
                Duration = 4000,
                ShowProgress = true,
                CloseOnClick = true,
                Payload = DateTime.Now
            });
    }

    private async Task AddToCart(v_ProductCategory product)
    {
        ShowNotification(product.productName);

        var existing = cart.FirstOrDefault(p => p.id == product.id);
        if (existing != null)
        {
            existing.quantity++;
        }
        else
        {
            cart.Add(new CartItem
                {
                    id = product.id,
                    productName = product.productName,
                    price = product.price ?? 0,
                    imgUrl = product.imgUrl,
                    quantity = 1
                });
        }
        await LocalStorage.SetItemAsync("cart", cart);
        StateHasChanged();
    }
}
